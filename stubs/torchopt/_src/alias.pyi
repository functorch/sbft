"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Optional, Tuple, Union
from torchopt._src import base
from torchopt._src.typing import ScalarOrSchedule

def adam(lr: ScalarOrSchedule = ..., betas: Tuple[float, float] = ..., eps: float = ..., weight_decay: float = ..., *, eps_root: float = ..., moment_requires_grad: bool = ..., maximize: bool = ..., use_accelerated_op: bool = ...) -> base.GradientTransformation:
    """The functional Adam optimizer.

    Adam is an SGD variant with learning rate adaptation. The *learning rate* used for each weight
    is computed from estimates of first- and second-order moments of the gradients (using suitable
    exponential moving averages).

    References:
        - Kingma et al, 2014: https://arxiv.org/abs/1412.6980

    Args:
        lr: (default: :const:`1e-3`)
            This is a fixed global scaling factor.
        betas: (default: :const:`(0.9, 0.999)`)
            Coefficients used for computing running averages of gradient and its square.
        eps: (default: :const:`1e-8`)
            A small constant applied to denominator outside of the square root (as in the Adam
            paper) to avoid dividing by zero when rescaling.
        weight_decay: (default: :const:`0.0`)
            Weight decay, add L2 penalty to parameters.
        eps_root: (default: :data:`0.0`)
            A small constant applied to denominator inside the square root (as in RMSProp), to avoid
            dividing by zero when rescaling. This is needed for example when computing
            (meta-)gradients through Adam.
        moment_requires_grad: (default: :data:`False`)
            If :data:`True` the momentums will be created with flag ``requires_grad=True``, this
            flag is often used in Meta-Learning algorithms.
        maximize: (default: :data:`False`)
            Maximize the params based on the objective, instead of minimizing.
        use_accelerated_op: (default: :data:`False`)
            If :data:`True` use our implemented fused operator.

    Returns:
        The corresponding :class:`GradientTransformation` instance.

    See Also:
        The functional optimizer wrapper :class:`torchopt.FuncOptimizer`.
    """
    ...

def adamw(lr: ScalarOrSchedule = ..., betas: Tuple[float, float] = ..., eps: float = ..., weight_decay: float = ..., *, eps_root: float = ..., mask: Optional[Union[Any, Callable[[base.Params], Any]]] = ..., moment_requires_grad: bool = ..., maximize: bool = ..., use_accelerated_op: bool = ...) -> base.GradientTransformation:
    """Adam with weight decay regularization.

    AdamW uses weight decay to regularize learning towards small weights, as
    this leads to better generalization. In SGD you can also use L2 regularization
    to implement this as an additive loss term, however L2 regularization
    does not behave as intended for adaptive gradient algorithms such as Adam.

    References:
        - Loshchilov et al, 2019: https://arxiv.org/abs/1711.05101

    Args:
        lr: (default: :const:`1e-3`)
            This is a fixed global scaling factor.
        betas: (default: :const:`(0.9, 0.999)`)
            Coefficients used for computing running averages of gradient and its square.
        eps: (default: :const:`1e-8`)
            A small constant applied to denominator outside of the square root (as in the Adam
            paper) to avoid dividing by zero when rescaling.
        weight_decay: (default: :const:`1e-2`)
            Strength of the weight decay regularization. Note that this weight decay is multiplied
            with the learning rate. This is consistent with other frameworks such as PyTorch, but
            different from (Loshchilov et al, 2019) where the weight decay is only multiplied with
            the "schedule multiplier", but not the base learning rate.
        eps_root: (default: :data:`0.0`)
            A small constant applied to denominator inside the square root (as in RMSProp), to avoid
            dividing by zero when rescaling. This is needed for example when computing
            (meta-)gradients through Adam.
        mask: (default: :data:`None`)
            A tree with same structure as (or a prefix of) the params PyTree, or a Callable that
            returns such a pytree given the params/updates. The leaves should be booleans,
            :data:`True` for leaves/subtrees you want to apply the weight decay to, and
            :data:`False` for those you want to skip. Note that the Adam gradient
            transformations are applied to all parameters.
        moment_requires_grad: (default: :data:`False`)
            If :data:`True` the momentums will be created with flag ``requires_grad=True``, this
            flag is often used in Meta-Learning algorithms.
        maximize: (default: :data:`False`)
            Maximize the params based on the objective, instead of minimizing.
        use_accelerated_op: (default: :data:`False`)
            If :data:`True` use our implemented fused operator.

    Returns:
        The corresponding :class:`GradientTransformation` instance.

    See Also:
        The functional optimizer wrapper :class:`torchopt.FuncOptimizer`.
    """
    ...

def rmsprop(lr: ScalarOrSchedule = ..., alpha: float = ..., eps: float = ..., weight_decay: float = ..., momentum: float = ..., centered: bool = ..., *, initial_scale: float = ..., nesterov: bool = ..., maximize: bool = ...) -> base.GradientTransformation:
    """The functional version of the RMSProp optimizer.

    RMSProp is an SGD variant with learning rate adaptation. The *learning rate* used for each
    weight is scaled by a suitable estimate of the magnitude of the gradients on previous steps.
    Several variants of RMSProp can be found in the literature. This alias provides an easy to
    configure RMSProp optimizer that can be used to switch between several of these variants.

    References:
        - Tieleman and Hinton, 2012: http://www.cs.toronto.edu/~hinton/coursera/lecture6/lec6.pdf
        - Graves, 2013: https://arxiv.org/abs/1308.0850

    Args:
        lr: (default: :const:`1e-2`)
            This is a fixed global scaling factor.
        alpha: (default: :const:`0.99`)
            Smoothing constant, the decay used to track the magnitude of previous gradients.
        eps: (default: :const:`1e-8`)
            A small numerical constant to avoid dividing by zero when rescaling.
        weight_decay: (default: :const:`0.0`)
            Weight decay, add L2 penalty to parameters.
        momentum: (default: :const:`0.0`)
            The decay rate used by the momentum term. The momentum is not used when it is set to
            :const:`0.0`.
        centered: (default: :data:`False`)
            If :data:`True`, use the variance of the past gradients to rescale the latest
            gradients.
        initial_scale: (default: :data:`0.0`)
            Initialization of accumulators tracking the magnitude of previous updates. PyTorch
            uses :data:`0.0`, TensorFlow 1.x uses :data:`1.0`. When reproducing results from a
            paper, verify the value used by the authors.
        nesterov: (default: :data:`False`)
            Whether to use Nesterov momentum.
        maximize: (default: :data:`False`)
            Maximize the params based on the objective, instead of minimizing.

    Returns:
        The corresponding :class:`GradientTransformation` instance.

    See Also:
        The functional optimizer wrapper :class:`torchopt.FuncOptimizer`.
    """
    ...

def sgd(lr: ScalarOrSchedule, momentum: float = ..., dampening: float = ..., weight_decay: float = ..., nesterov: bool = ..., *, moment_requires_grad: bool = ..., maximize: bool = ...) -> base.GradientTransformation:
    """The functional version of the canonical Stochastic Gradient Descent optimizer.

    This implements stochastic gradient descent. It also includes support for momentum, and nesterov
    acceleration, as these are standard practice when using stochastic gradient descent to train
    deep neural networks.

    References:
        - Sutskever et al, 2013: http://proceedings.mlr.press/v28/sutskever13.pdf

    Args:
        lr: This is a fixed global scaling factor.
        momentum: (default: :const:`0.0`)
            The decay rate used by the momentum term. The momentum is not used when it is set to
            :const:`0.0`.
        weight_decay: (default: :const:`0.0`)
            Weight decay, add L2 penalty to parameters.
        dampening: (default: :const:`0.0`)
            Dampening for momentum.
        nesterov: (default: :data:`False`)
            Whether to use Nesterov momentum.
        moment_requires_grad: (default: :data:`False`)
            If :data:`True` the momentums will be created with flag ``requires_grad=True``, this
            flag is often used in Meta-Learning algorithms.
        maximize: (default: :data:`False`)
            Maximize the params based on the objective, instead of minimizing.

    Returns:
        The corresponding :class:`GradientTransformation` instance.

    See Also:
        The functional optimizer wrapper :class:`torchopt.FuncOptimizer`.
    """
    ...

