"""
This type stub file was generated by pyright.
"""

import torch
from typing import Iterable
from torchopt._src.base import GradientTransformation

class Optimizer:
    """A base class for classic optimizers that similar to :class:`torch.optim.Optimizer`."""
    def __init__(self, params: Iterable[torch.Tensor], impl: GradientTransformation) -> None:
        r"""The :meth:`init` function.

        Args:
            params (iterable of torch.Tensor): An iterable of :class:`torch.Tensor`\s. Specifies
                what tensors should be optimized.
            impl (GradientTransformation): A low level optimizer function, it could be a optimizer
                function provided by ``alias.py`` or a customized ``chain`` provided by
                ``combine.py``.
                Note that using ``Optimizer(sgd())`` or ``Optimizer(chain(sgd()))`` is equivalent to
                :class:`torchopt.SGD`.
        """
        ...
    
    def zero_grad(self, set_to_none: bool = ...): # -> None:
        r"""Sets the gradients of all optimized :class:`torch.Tensor`\s to zero.

        The behavior is similar to :meth:`torch.optim.Optimizer.zero_grad`.

        Args:
            set_to_none (bool): Instead of setting to zero, set the ``grads`` to :data:`None`.
        """
        ...
    
    def state_dict(self): # -> list[Unknown]:
        """Returns the state of the optimizer."""
        ...
    
    def load_state_dict(self, state_dict): # -> None:
        """Loads the optimizer state.

        Args:
            state_dict (dict): Optimizer state. Should be an object returned from a call to
                :meth:`state_dict`.
        """
        ...
    
    def step(self, closure=...): # -> None:
        """Performs a single optimization step.

        The behavior is similar to :meth:`torch.optim.Optimizer.step`.

        Args:
            closure (callable, optional): A closure that reevaluates the model and returns the loss.
        """
        ...
    
    def add_param_group(self, params): # -> None:
        """Add a param group to the optimizer's :attr:`param_groups`."""
        ...
    


