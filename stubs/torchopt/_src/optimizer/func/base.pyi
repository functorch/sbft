"""
This type stub file was generated by pyright.
"""

import torch
from typing import Optional
from torchopt._src.base import GradientTransformation
from torchopt._src.typing import TensorTree

class FuncOptimizer:
    """A wrapper class to hold the functional optimizer.

    This wrapper makes it easier to maintain the optimizer states. The optimizer states are held by
    the wrapper internally. The wrapper provides a :meth:`step` function to compute the gradients
    and update the parameters.

    See Also:
        - The functional Adam optimizer: :func:`torchopt.adam`.
        - The functional AdamW optimizer: :func:`torchopt.adamw`.
        - The functional RMSprop optimizer: :func:`torchopt.rmsprop`.
        - The functional SGD optimizer: :func:`torchopt.sgd`.
    """
    __NOT_INITIALIZED = ...
    def __init__(self, impl: GradientTransformation, *, inplace: bool = ...) -> None:
        """The :meth:`init` function.

        Args:
            impl (GradientTransformation): A low level optimizer function, it could be a optimizer
                function provided by `alias.py` or a customized `chain` provided by `combine.py`.
            inplace (optional): (default: :data:`False`)
                The default value of ``inplace`` for each optimization update.
        """
        ...
    
    def step(self, loss: torch.Tensor, params: TensorTree, inplace: Optional[bool] = ...) -> TensorTree:
        r"""Compute the gradients of loss to the network parameters and update network parameters.

        Graph of the derivative will be constructed, allowing to compute higher order derivative
        products. We use the differentiable optimizer (pass argument inplace=False) to scale the
        gradients and update the network parameters without modifying tensors in-place.

        Args:
            loss: (torch.Tensor)
                loss that is used to compute the gradients to network parameters.
            params: (tree of torch.Tensor)
                An tree of :class:`torch.Tensor`\s. Specifies what tensors should be optimized.
            inplace (optional): (default: :data:`None`)
                Whether to update the parameters in-place. If :data:`None`, use the default value
                specified in the constructor.
        """
        ...
    


