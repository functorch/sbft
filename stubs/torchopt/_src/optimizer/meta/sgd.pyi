"""
This type stub file was generated by pyright.
"""

import torch.nn as nn
from torchopt._src.optimizer.meta.base import MetaOptimizer
from torchopt._src.typing import ScalarOrSchedule

class MetaSGD(MetaOptimizer):
    """The differentiable Stochastic Gradient Descent optimizer.

    See Also:
        - The functional SGD optimizer: :func:`torchopt.sgd`.
        - The classic SGD optimizer: :class:`torchopt.SGD`.
    """
    def __init__(self, net: nn.Module, lr: ScalarOrSchedule, momentum: float = ..., weight_decay: float = ..., dampening: float = ..., nesterov: bool = ..., moment_requires_grad: bool = ..., maximize: bool = ...) -> None:
        """The :meth:`init` function.

        Args:
            net: (nn.Module)
                A network whose parameters should be optimized.
            lr: This is a fixed global scaling factor.
            momentum: (default: :const:`0.0`)
                The decay rate used by the momentum term. The momentum is not used when it is set to
                :const:`0.0`.
            weight_decay: (default: :const:`0.0`)
                Weight decay, add L2 penalty to parameters.
            dampening: (default: :const:`0.0`)
                Dampening for momentum.
            nesterov: (default: :const:`False`)
                Whether to use Nesterov momentum.
            moment_requires_grad: (default: :data:`True`)
                If :data:`True` the momentums will be created with flag ``requires_grad=True``, this
                flag is often used in Meta-Learning algorithms.
            maximize: (default: :data:`False`)
                Maximize the params based on the objective, instead of minimizing.
        """
        ...
    


