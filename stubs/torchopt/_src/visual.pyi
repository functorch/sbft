"""
This type stub file was generated by pyright.
"""

import torch
from graphviz import Digraph

Node = ...
SAVED_PREFIX = ...
def get_fn_name(fn, show_attrs, max_attr_chars): # -> str:
    """Returns function name."""
    ...

def make_dot(var: torch.Tensor, params=..., show_attrs=..., show_saved=..., max_attr_chars=...) -> Digraph:
    """Produces Graphviz representation of PyTorch autograd graph.

    If a node represents a backward function, it is gray. Otherwise, the node represents a tensor
    and is either blue, orange, or green:

        - **Blue**
            Reachable leaf tensors that requires grad (tensors whose :attr:`grad` fields will be
            populated during :meth:`backward`).
        - **Orange**
            Saved tensors of custom autograd functions as well as those saved by built-in backward
            nodes.
        - **Green**
            Tensor passed in as outputs.
        - **Dark green**
            If any output is a view, we represent its base tensor with a dark green node.

    Args:
        var: Output tensor.
        params: ([dict of (name, tensor) or state_dict])
            Parameters to add names to node that requires grad.
        show_attrs: Whether to display non-tensor attributes of backward nodes
            (Requires PyTorch version >= 1.9)
        show_saved: Whether to display saved tensor nodes that are not by custom autograd
            functions. Saved tensor nodes for custom functions, if present, are always displayed.
            (Requires PyTorch version >= 1.9)
        max_attr_chars: If ``show_attrs`` is :data:`True`, sets max number of characters to display
            for any given attribute.
    """
    ...

def resize_graph(dot, size_per_element=..., min_size=...): # -> None:
    """Resize the graph according to how much content it contains.

    Modify the graph in place.
    """
    ...

